#!/bin/sh

set -e

# Get the directory of this executable in order to get the relative path to
# installable modules. This is useful when invoking docker-init from places
# other than the parent dir.
DIR=$( dirname "$0" )

# If running with mounted code...
if [ ! -e clean ]; then
    set -x
    unset JS_BUILD
    echo "{\"sha\":\"$VERSION_SHA\",\"name\":\"$VERSION_NAME\",\"repo\":\"$VERSION_REPO\",\"modified\":true}" > /mist-version.json
    pip install -e $DIR/../lc/
    pip install -e $DIR/../src/
    set +e
    diff /requirements-mist.api.txt $DIR/../requirements.txt
    if [ $? -ne 0 ]; then
        pip install -r $DIR/../requirements.txt
    fi
    set -e
    set +x
    for plugin in $($DIR/list-plugins 2>/dev/null); do
        echo "Will try to install plugin $plugin."
        if [ -f /opt/$plugin/setup.py ]; then
            echo "  Found in /opt/$plugin/"
            pip install -e /opt/$plugin/
        elif [ -f /opt/$plugin/src/setup.py ]; then
            echo "  Found in /opt/$plugin/src/"
            pip install -e /opt/$plugin/src/
        else
            echo "  WARNING: Not Found"
        fi
    done
fi

# Create settings.py file from template if missing...
if [ -n "$SETTINGS_FILE" ] && [ ! -e "$SETTINGS_FILE" ]; then
    set -x
    conf_dir=$(dirname $SETTINGS_FILE)
    mkdir -p $conf_dir
    tmp_file=$(mktemp -p $conf_dir)
    cp settings.py.dist $tmp_file
    mv $tmp_file $SETTINGS_FILE
    set +x
fi

exec "$@"
